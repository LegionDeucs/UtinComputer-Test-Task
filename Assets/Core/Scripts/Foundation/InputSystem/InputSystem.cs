//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Core/Scripts/Foundation/InputSystem/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""PhoneActionMap"",
            ""id"": ""e364b1a7-f391-4da4-a464-28396b88f140"",
            ""actions"": [
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""f9f61a57-6675-47f5-8353-5898785b6671"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShootButton"",
                    ""type"": ""Button"",
                    ""id"": ""bd12486e-841c-42f7-ad86-be2c0a70dafb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""94b4a6d1-2e0c-45ca-a41c-4281aee4b310"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7de94c47-a9b2-4485-9de0-7761136f9300"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PhoneActionMap
        m_PhoneActionMap = asset.FindActionMap("PhoneActionMap", throwIfNotFound: true);
        m_PhoneActionMap_Aim = m_PhoneActionMap.FindAction("Aim", throwIfNotFound: true);
        m_PhoneActionMap_ShootButton = m_PhoneActionMap.FindAction("ShootButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PhoneActionMap
    private readonly InputActionMap m_PhoneActionMap;
    private List<IPhoneActionMapActions> m_PhoneActionMapActionsCallbackInterfaces = new List<IPhoneActionMapActions>();
    private readonly InputAction m_PhoneActionMap_Aim;
    private readonly InputAction m_PhoneActionMap_ShootButton;
    public struct PhoneActionMapActions
    {
        private @InputSystem m_Wrapper;
        public PhoneActionMapActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Aim => m_Wrapper.m_PhoneActionMap_Aim;
        public InputAction @ShootButton => m_Wrapper.m_PhoneActionMap_ShootButton;
        public InputActionMap Get() { return m_Wrapper.m_PhoneActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PhoneActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IPhoneActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PhoneActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PhoneActionMapActionsCallbackInterfaces.Add(instance);
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @ShootButton.started += instance.OnShootButton;
            @ShootButton.performed += instance.OnShootButton;
            @ShootButton.canceled += instance.OnShootButton;
        }

        private void UnregisterCallbacks(IPhoneActionMapActions instance)
        {
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @ShootButton.started -= instance.OnShootButton;
            @ShootButton.performed -= instance.OnShootButton;
            @ShootButton.canceled -= instance.OnShootButton;
        }

        public void RemoveCallbacks(IPhoneActionMapActions instance)
        {
            if (m_Wrapper.m_PhoneActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPhoneActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PhoneActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PhoneActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PhoneActionMapActions @PhoneActionMap => new PhoneActionMapActions(this);
    public interface IPhoneActionMapActions
    {
        void OnAim(InputAction.CallbackContext context);
        void OnShootButton(InputAction.CallbackContext context);
    }
}
